{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4dd1c03a",
   "metadata": {},
   "source": [
    "candidate number :- 251043"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01f7dd21",
   "metadata": {},
   "source": [
    "#                         The PAMAP2 dataset monitoring for product development"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6233226b",
   "metadata": {},
   "source": [
    "Our very first step will be to import the scientific packages called libraries we will use in this movie data exploratory, which are NumPy, pandas, seaborn, and matplotlib:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4ff2cf0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import math\n",
    "import seaborn as sns\n",
    "import plotly.express as px\n",
    "from sklearn.model_selection import train_test_split\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "625c0b7a",
   "metadata": {},
   "source": [
    "The next step is to create a Python variable called my file which has movie_metadata, which contains the address to a list data file. Text files are used to store tabular data in this standard format. There is a list of dat whuch stored in data file of subject 101 to 109.\n",
    "To load all the files and create the data frame, you need to create a list of file names. In addition, a dictionary that includes the names and numbers of each activity must be created in order to recognize which activity is being analyzed at which stage.\n",
    "load_activity_map is to determine the map \n",
    "In order to have column names for the data frame, we have to make lists for each category of IMU. IMU's that will be used are for chest, ankle and hand.\n",
    "A collection of columns is created by combining all the different lists.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a8487323",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "54"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_of_files = ['subject101.dat',\n",
    "                 'subject102.dat',\n",
    "                 'subject103.dat',\n",
    "                 'subject104.dat',\n",
    "                 'subject105.dat',\n",
    "                 'subject106.dat',\n",
    "                 'subject107.dat',\n",
    "                 'subject108.dat',\n",
    "                 'subject109.dat' ]\n",
    "\n",
    "subjectID = [1,2,3,4,5,6,7,8,9]\n",
    "\n",
    "activityIDdict = {0: 'transient',\n",
    "              1: 'lying',\n",
    "              2: 'sitting',\n",
    "              3: 'standing',\n",
    "              4: 'walking',\n",
    "              5: 'running',\n",
    "              6: 'cycling',\n",
    "              7: 'Nordic_walking',\n",
    "              9: 'watching_TV',\n",
    "              10: 'computer_work',\n",
    "              11: 'car driving',\n",
    "              12: 'ascending_stairs',\n",
    "              13: 'descending_stairs',\n",
    "              16: 'vacuum_cleaning',\n",
    "              17: 'ironing',\n",
    "              18: 'folding_laundry',\n",
    "              19: 'house_cleaning',\n",
    "              20: 'playing_soccer',\n",
    "              24: 'rope_jumping' }\n",
    "\n",
    "def load_activity_map():\n",
    "    map = {}\n",
    "    map[0] = 'transient'\n",
    "    map[1] = 'lying'\n",
    "    map[2] = 'sitting'\n",
    "    map[3] = 'standing'\n",
    "    map[4] = 'walking'\n",
    "    map[5] = 'running'\n",
    "    map[6] = 'cycling'\n",
    "    map[7] = 'Nordic_walking'\n",
    "    map[9] = 'watching_TV'\n",
    "    map[10] = 'computer_work'\n",
    "    map[11] = 'car driving'\n",
    "    map[12] = 'ascending_stairs'\n",
    "    map[13] = 'descending_stairs'\n",
    "    map[16] = 'vacuum_cleaning'\n",
    "    map[17] = 'ironing'\n",
    "    map[18] = 'folding_laundry'\n",
    "    map[19] = 'house_cleaning'\n",
    "    map[20] = 'playing_soccer'\n",
    "    map[24] = 'rope_jumping'\n",
    "    return map\n",
    "\n",
    "colNames = [\"timestamp\", \"activityID\",\"heartrate\"]\n",
    "\n",
    "IMUhand = ['handTemperature', \n",
    "           'handAcc16_1', 'handAcc16_2', 'handAcc16_3', \n",
    "           'handAcc6_1', 'handAcc6_2', 'handAcc6_3', \n",
    "           'handGyro1', 'handGyro2', 'handGyro3', \n",
    "           'handMagne1', 'handMagne2', 'handMagne3',\n",
    "           'handOrientation1', 'handOrientation2', 'handOrientation3', 'handOrientation4']\n",
    "\n",
    "IMUchest = ['chestTemperature', \n",
    "           'chestAcc16_1', 'chestAcc16_2', 'chestAcc16_3', \n",
    "           'chestAcc6_1', 'chestAcc6_2', 'chestAcc6_3', \n",
    "           'chestGyro1', 'chestGyro2', 'chestGyro3', \n",
    "           'chestMagne1', 'chestMagne2', 'chestMagne3',\n",
    "           'chestOrientation1', 'chestOrientation2', 'chestOrientation3', 'chestOrientation4']\n",
    "\n",
    "IMUankle = ['ankleTemperature', \n",
    "           'ankleAcc16_1', 'ankleAcc16_2', 'ankleAcc16_3', \n",
    "           'ankleAcc6_1', 'ankleAcc6_2', 'ankleAcc6_3', \n",
    "           'ankleGyro1', 'ankleGyro2', 'ankleGyro3', \n",
    "           'ankleMagne1', 'ankleMagne2', 'ankleMagne3',\n",
    "           'ankleOrientation1', 'ankleOrientation2', 'ankleOrientation3', 'ankleOrientation4']\n",
    "\n",
    "columns = colNames + IMUhand + IMUchest + IMUankle \n",
    "len(columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b060db52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>activityID</th>\n",
       "      <th>heartrate</th>\n",
       "      <th>handTemperature</th>\n",
       "      <th>handAcc16_1</th>\n",
       "      <th>handAcc16_2</th>\n",
       "      <th>handAcc16_3</th>\n",
       "      <th>handAcc6_1</th>\n",
       "      <th>handAcc6_2</th>\n",
       "      <th>handAcc6_3</th>\n",
       "      <th>...</th>\n",
       "      <th>ankleGyro2</th>\n",
       "      <th>ankleGyro3</th>\n",
       "      <th>ankleMagne1</th>\n",
       "      <th>ankleMagne2</th>\n",
       "      <th>ankleMagne3</th>\n",
       "      <th>ankleOrientation1</th>\n",
       "      <th>ankleOrientation2</th>\n",
       "      <th>ankleOrientation3</th>\n",
       "      <th>ankleOrientation4</th>\n",
       "      <th>subject_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.38</td>\n",
       "      <td>0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.37223</td>\n",
       "      <td>8.60074</td>\n",
       "      <td>3.51048</td>\n",
       "      <td>2.43954</td>\n",
       "      <td>8.76165</td>\n",
       "      <td>3.35465</td>\n",
       "      <td>...</td>\n",
       "      <td>0.009250</td>\n",
       "      <td>-0.017580</td>\n",
       "      <td>-61.1888</td>\n",
       "      <td>-38.9599</td>\n",
       "      <td>-58.1438</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.39</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.18837</td>\n",
       "      <td>8.56560</td>\n",
       "      <td>3.66179</td>\n",
       "      <td>2.39494</td>\n",
       "      <td>8.55081</td>\n",
       "      <td>3.64207</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.004638</td>\n",
       "      <td>0.000368</td>\n",
       "      <td>-59.8479</td>\n",
       "      <td>-38.8919</td>\n",
       "      <td>-58.5253</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.40</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.37357</td>\n",
       "      <td>8.60107</td>\n",
       "      <td>3.54898</td>\n",
       "      <td>2.30514</td>\n",
       "      <td>8.53644</td>\n",
       "      <td>3.73280</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000148</td>\n",
       "      <td>0.022495</td>\n",
       "      <td>-60.7361</td>\n",
       "      <td>-39.4138</td>\n",
       "      <td>-58.3999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.41</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.07473</td>\n",
       "      <td>8.52853</td>\n",
       "      <td>3.66021</td>\n",
       "      <td>2.33528</td>\n",
       "      <td>8.53622</td>\n",
       "      <td>3.73277</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.020301</td>\n",
       "      <td>0.011275</td>\n",
       "      <td>-60.4091</td>\n",
       "      <td>-38.7635</td>\n",
       "      <td>-58.3956</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.42</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.22936</td>\n",
       "      <td>8.83122</td>\n",
       "      <td>3.70000</td>\n",
       "      <td>2.23055</td>\n",
       "      <td>8.59741</td>\n",
       "      <td>3.76295</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.014303</td>\n",
       "      <td>-0.002823</td>\n",
       "      <td>-61.5199</td>\n",
       "      <td>-39.3879</td>\n",
       "      <td>-58.2694</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 55 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp  activityID  heartrate  handTemperature  handAcc16_1  \\\n",
       "0       8.38           0      104.0             30.0      2.37223   \n",
       "1       8.39           0        NaN             30.0      2.18837   \n",
       "2       8.40           0        NaN             30.0      2.37357   \n",
       "3       8.41           0        NaN             30.0      2.07473   \n",
       "4       8.42           0        NaN             30.0      2.22936   \n",
       "\n",
       "   handAcc16_2  handAcc16_3  handAcc6_1  handAcc6_2  handAcc6_3  ...  \\\n",
       "0      8.60074      3.51048     2.43954     8.76165     3.35465  ...   \n",
       "1      8.56560      3.66179     2.39494     8.55081     3.64207  ...   \n",
       "2      8.60107      3.54898     2.30514     8.53644     3.73280  ...   \n",
       "3      8.52853      3.66021     2.33528     8.53622     3.73277  ...   \n",
       "4      8.83122      3.70000     2.23055     8.59741     3.76295  ...   \n",
       "\n",
       "   ankleGyro2  ankleGyro3  ankleMagne1  ankleMagne2  ankleMagne3  \\\n",
       "0    0.009250   -0.017580     -61.1888     -38.9599     -58.1438   \n",
       "1   -0.004638    0.000368     -59.8479     -38.8919     -58.5253   \n",
       "2    0.000148    0.022495     -60.7361     -39.4138     -58.3999   \n",
       "3   -0.020301    0.011275     -60.4091     -38.7635     -58.3956   \n",
       "4   -0.014303   -0.002823     -61.5199     -39.3879     -58.2694   \n",
       "\n",
       "   ankleOrientation1  ankleOrientation2  ankleOrientation3  ankleOrientation4  \\\n",
       "0                1.0                0.0                0.0                0.0   \n",
       "1                1.0                0.0                0.0                0.0   \n",
       "2                1.0                0.0                0.0                0.0   \n",
       "3                1.0                0.0                0.0                0.0   \n",
       "4                1.0                0.0                0.0                0.0   \n",
       "\n",
       "   subject_id  \n",
       "0           1  \n",
       "1           1  \n",
       "2           1  \n",
       "3           1  \n",
       "4           1  \n",
       "\n",
       "[5 rows x 55 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataCollection = pd.DataFrame()\n",
    "for file in list_of_files:\n",
    "    procData = pd.read_table(file, header=None, sep='\\s+')\n",
    "    procData.columns = columns\n",
    "    procData['subject_id'] = int(file[-5])\n",
    "    dataCollection = dataCollection.append(procData, ignore_index=True)\n",
    "\n",
    "dataCollection.reset_index(drop=True, inplace=True)\n",
    "dataCollection.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cef802a0",
   "metadata": {},
   "source": [
    "In the sample of the dataframe that we produced, it is evident that some data cleaning is needed. In the case of activityID 0 for example, it must be completely removed from our dataset since this is a transient period when the subject did not do any particular activity as described in the readme file. We will discuss data cleaning in detail in the following section.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4418f9e6",
   "metadata": {},
   "source": [
    "In the below index contains columns form that we remove extra columns that are irrelevant with our analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "02889fea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['timestamp', 'activityID', 'heartrate', 'handTemperature',\n",
       "       'handAcc16_1', 'handAcc16_2', 'handAcc16_3', 'handAcc6_1', 'handAcc6_2',\n",
       "       'handAcc6_3', 'handGyro1', 'handGyro2', 'handGyro3', 'handMagne1',\n",
       "       'handMagne2', 'handMagne3', 'handOrientation1', 'handOrientation2',\n",
       "       'handOrientation3', 'handOrientation4', 'chestTemperature',\n",
       "       'chestAcc16_1', 'chestAcc16_2', 'chestAcc16_3', 'chestAcc6_1',\n",
       "       'chestAcc6_2', 'chestAcc6_3', 'chestGyro1', 'chestGyro2', 'chestGyro3',\n",
       "       'chestMagne1', 'chestMagne2', 'chestMagne3', 'chestOrientation1',\n",
       "       'chestOrientation2', 'chestOrientation3', 'chestOrientation4',\n",
       "       'ankleTemperature', 'ankleAcc16_1', 'ankleAcc16_2', 'ankleAcc16_3',\n",
       "       'ankleAcc6_1', 'ankleAcc6_2', 'ankleAcc6_3', 'ankleGyro1', 'ankleGyro2',\n",
       "       'ankleGyro3', 'ankleMagne1', 'ankleMagne2', 'ankleMagne3',\n",
       "       'ankleOrientation1', 'ankleOrientation2', 'ankleOrientation3',\n",
       "       'ankleOrientation4', 'subject_id'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataCollection.columns # datacollection on dat file that which column are imortant."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3eee95dd",
   "metadata": {},
   "source": [
    "The info() function is used to print a concise summary of a DataFrame:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "49bb7494",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2872533 entries, 0 to 2872532\n",
      "Data columns (total 55 columns):\n",
      " #   Column             Dtype  \n",
      "---  ------             -----  \n",
      " 0   timestamp          float64\n",
      " 1   activityID         int64  \n",
      " 2   heartrate          float64\n",
      " 3   handTemperature    float64\n",
      " 4   handAcc16_1        float64\n",
      " 5   handAcc16_2        float64\n",
      " 6   handAcc16_3        float64\n",
      " 7   handAcc6_1         float64\n",
      " 8   handAcc6_2         float64\n",
      " 9   handAcc6_3         float64\n",
      " 10  handGyro1          float64\n",
      " 11  handGyro2          float64\n",
      " 12  handGyro3          float64\n",
      " 13  handMagne1         float64\n",
      " 14  handMagne2         float64\n",
      " 15  handMagne3         float64\n",
      " 16  handOrientation1   float64\n",
      " 17  handOrientation2   float64\n",
      " 18  handOrientation3   float64\n",
      " 19  handOrientation4   float64\n",
      " 20  chestTemperature   float64\n",
      " 21  chestAcc16_1       float64\n",
      " 22  chestAcc16_2       float64\n",
      " 23  chestAcc16_3       float64\n",
      " 24  chestAcc6_1        float64\n",
      " 25  chestAcc6_2        float64\n",
      " 26  chestAcc6_3        float64\n",
      " 27  chestGyro1         float64\n",
      " 28  chestGyro2         float64\n",
      " 29  chestGyro3         float64\n",
      " 30  chestMagne1        float64\n",
      " 31  chestMagne2        float64\n",
      " 32  chestMagne3        float64\n",
      " 33  chestOrientation1  float64\n",
      " 34  chestOrientation2  float64\n",
      " 35  chestOrientation3  float64\n",
      " 36  chestOrientation4  float64\n",
      " 37  ankleTemperature   float64\n",
      " 38  ankleAcc16_1       float64\n",
      " 39  ankleAcc16_2       float64\n",
      " 40  ankleAcc16_3       float64\n",
      " 41  ankleAcc6_1        float64\n",
      " 42  ankleAcc6_2        float64\n",
      " 43  ankleAcc6_3        float64\n",
      " 44  ankleGyro1         float64\n",
      " 45  ankleGyro2         float64\n",
      " 46  ankleGyro3         float64\n",
      " 47  ankleMagne1        float64\n",
      " 48  ankleMagne2        float64\n",
      " 49  ankleMagne3        float64\n",
      " 50  ankleOrientation1  float64\n",
      " 51  ankleOrientation2  float64\n",
      " 52  ankleOrientation3  float64\n",
      " 53  ankleOrientation4  float64\n",
      " 54  subject_id         int64  \n",
      "dtypes: float64(53), int64(2)\n",
      "memory usage: 1.2 GB\n"
     ]
    }
   ],
   "source": [
    "dataCollection.info() #information about data and so easy understle which column are important for model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24a6103c",
   "metadata": {},
   "source": [
    "As a result, we get information about the data frame, dt type, float type, column type, and index type.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6797f5da",
   "metadata": {},
   "source": [
    "# Balance Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4b44fba9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pd_fast_plot(pd,column_a,column_b,title, figsize=(10,6)):\n",
    "    plt.rcParams.update({'font.size': 16})\n",
    "    size = range(len(pd))\n",
    "    f, ax = plt.subplots(figsize=figsize) \n",
    "    plt.bar(size, pd[column_a], color=plt.cm.Paired(size))\n",
    "    a = ax.set_xticklabels(pd[column_b])\n",
    "    b = ax.legend(fontsize = 20)\n",
    "    c = ax.set_xticks(np.arange(len(pd)))\n",
    "    d = ax.set_title(title)\n",
    "    plt.show()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "656c1eb7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-18-665e0abf7105>:6: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  a = ax.set_xticklabels(pd[column_b])\n",
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sampels = dataCollection.groupby(['subject_id']).count().reset_index()\n",
    "sampels_to_subject = pd.DataFrame()\n",
    "sampels_to_subject['subject_id'] = sampels['subject_id']\n",
    "sampels_to_subject['sampels'] = sampels['timestamp']\n",
    "sampels_to_subject = sampels_to_subject.sort_values(by=['sampels'])\n",
    "pd_fast_plot(sampels_to_subject,'sampels','subject_id','Number Of Samepls By Users')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "dc84487c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-18-665e0abf7105>:6: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  a = ax.set_xticklabels(pd[column_b])\n",
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2880x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "map_ac = load_activity_map()\n",
    "sampels = dataCollection.groupby(['activityID']).count().reset_index()\n",
    "sampels_to_subject = pd.DataFrame()\n",
    "sampels_to_subject['activity'] = [map_ac[x] for x in sampels['activityID']]\n",
    "sampels_to_subject['sampels'] = sampels['timestamp']\n",
    "sampels_to_subject = sampels_to_subject.sort_values(by=['sampels'])\n",
    "pd_fast_plot(sampels_to_subject,'sampels','activity','Number Of Samepls By Activity',figsize=(40,7))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c81e46d",
   "metadata": {},
   "source": [
    "As we can see, the data is not balanced:\n",
    "Subject 109 has fewer samples than all other subjects.\n",
    "rope_jumping activity as less samples than other activities\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c56c690d",
   "metadata": {},
   "source": [
    "# DATA CLEANING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "556bb19e",
   "metadata": {},
   "source": [
    "When looking at the PerformedActivitiesSummary file which is part of the collection of files provided, it is apparent that various data is missing, and as the readme file indicates, there were some wireless disconnections during data collection, so the missing data needs to be made up in a way that will not impact our data analysis. Further, each different activity has at least eight subjects who completed the activity, and each different activity has NaN values for various subjects. Therefore, some data filling is required. As for the NAN  values in our data, it is best to use interpolate which is constructing a new data point out of a set of known data points.\n",
    "Using the code below as a guideline, interpolation occurs after removing 'activity 0', as it contains very noisy data that would negatively impact output as the values given in heart rate would not be from the actual data points that were taken.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "95433813",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dataCleaning(dataCollection):\n",
    "        dataCollection = dataCollection.drop(['handOrientation1', 'handOrientation2', 'handOrientation3', 'handOrientation4',\n",
    "                                             'chestOrientation1', 'chestOrientation2', 'chestOrientation3', 'chestOrientation4',\n",
    "                                             'ankleOrientation1', 'ankleOrientation2', 'ankleOrientation3', 'ankleOrientation4'],\n",
    "                                             axis = 1)  \n",
    "        dataCollection = dataCollection.drop(dataCollection[dataCollection.activityID == 0].index) \n",
    "        dataCollection = dataCollection.interpolate() \n",
    "        return dataCollection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ec21bb56",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataCol = dataCleaning(dataCollection)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "87dd59b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>activityID</th>\n",
       "      <th>heartrate</th>\n",
       "      <th>handTemperature</th>\n",
       "      <th>handAcc16_1</th>\n",
       "      <th>handAcc16_2</th>\n",
       "      <th>handAcc16_3</th>\n",
       "      <th>handAcc6_1</th>\n",
       "      <th>handAcc6_2</th>\n",
       "      <th>handAcc6_3</th>\n",
       "      <th>...</th>\n",
       "      <th>ankleAcc6_1</th>\n",
       "      <th>ankleAcc6_2</th>\n",
       "      <th>ankleAcc6_3</th>\n",
       "      <th>ankleGyro1</th>\n",
       "      <th>ankleGyro2</th>\n",
       "      <th>ankleGyro3</th>\n",
       "      <th>ankleMagne1</th>\n",
       "      <th>ankleMagne2</th>\n",
       "      <th>ankleMagne3</th>\n",
       "      <th>subject_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>37.66</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>2.24689</td>\n",
       "      <td>8.55387</td>\n",
       "      <td>5.77143</td>\n",
       "      <td>...</td>\n",
       "      <td>9.63162</td>\n",
       "      <td>-1.76757</td>\n",
       "      <td>0.265761</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37.67</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>2.27373</td>\n",
       "      <td>8.14592</td>\n",
       "      <td>5.78739</td>\n",
       "      <td>...</td>\n",
       "      <td>9.58649</td>\n",
       "      <td>-1.75247</td>\n",
       "      <td>0.250816</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37.68</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>2.26966</td>\n",
       "      <td>7.66268</td>\n",
       "      <td>5.78846</td>\n",
       "      <td>...</td>\n",
       "      <td>9.60196</td>\n",
       "      <td>-1.73721</td>\n",
       "      <td>0.356632</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.69</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>2.22177</td>\n",
       "      <td>7.25535</td>\n",
       "      <td>5.88000</td>\n",
       "      <td>...</td>\n",
       "      <td>9.58674</td>\n",
       "      <td>-1.78264</td>\n",
       "      <td>0.311453</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.70</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>2.20720</td>\n",
       "      <td>7.24042</td>\n",
       "      <td>5.95555</td>\n",
       "      <td>...</td>\n",
       "      <td>9.64677</td>\n",
       "      <td>-1.75240</td>\n",
       "      <td>0.295902</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp  activityID  heartrate  handTemperature  handAcc16_1  \\\n",
       "0      37.66           1        NaN           30.375      2.21530   \n",
       "1      37.67           1        NaN           30.375      2.29196   \n",
       "2      37.68           1        NaN           30.375      2.29090   \n",
       "3      37.69           1        NaN           30.375      2.21800   \n",
       "4      37.70           1      100.0           30.375      2.30106   \n",
       "\n",
       "   handAcc16_2  handAcc16_3  handAcc6_1  handAcc6_2  handAcc6_3  ...  \\\n",
       "0      8.27915      5.58753     2.24689     8.55387     5.77143  ...   \n",
       "1      7.67288      5.74467     2.27373     8.14592     5.78739  ...   \n",
       "2      7.14240      5.82342     2.26966     7.66268     5.78846  ...   \n",
       "3      7.14365      5.89930     2.22177     7.25535     5.88000  ...   \n",
       "4      7.25857      6.09259     2.20720     7.24042     5.95555  ...   \n",
       "\n",
       "   ankleAcc6_1  ankleAcc6_2  ankleAcc6_3  ankleGyro1  ankleGyro2  ankleGyro3  \\\n",
       "0      9.63162     -1.76757     0.265761    0.002908   -0.027714    0.001752   \n",
       "1      9.58649     -1.75247     0.250816    0.020882    0.000945    0.006007   \n",
       "2      9.60196     -1.73721     0.356632   -0.035392   -0.052422   -0.004882   \n",
       "3      9.58674     -1.78264     0.311453   -0.032514   -0.018844    0.026950   \n",
       "4      9.64677     -1.75240     0.295902    0.001351   -0.048878   -0.006328   \n",
       "\n",
       "   ankleMagne1  ankleMagne2  ankleMagne3  subject_id  \n",
       "0     -61.1081     -36.8636     -58.3696           1  \n",
       "1     -60.8916     -36.3197     -58.3656           1  \n",
       "2     -60.3407     -35.7842     -58.6119           1  \n",
       "3     -60.7646     -37.1028     -57.8799           1  \n",
       "4     -60.2040     -37.1225     -57.8847           1  \n",
       "\n",
       "[5 rows x 43 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataCol.reset_index(drop = True, inplace = True)\n",
    "dataCol.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "323331eb",
   "metadata": {},
   "source": [
    "Since interpolation calculates the values around the NaN cells, heart rate still contains NaN values. Because the first cells are NaN, it is normal to generate new NaN values after interpolation. We can solve this problem by assuming the value of the first 4 cells is 100 since the values after the index 4 are 100. This will eliminate any NaN values from our dataset.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "32e43ee3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "timestamp           0\n",
       "activityID          0\n",
       "heartrate           4\n",
       "handTemperature     0\n",
       "handAcc16_1         0\n",
       "handAcc16_2         0\n",
       "handAcc16_3         0\n",
       "handAcc6_1          0\n",
       "handAcc6_2          0\n",
       "handAcc6_3          0\n",
       "handGyro1           0\n",
       "handGyro2           0\n",
       "handGyro3           0\n",
       "handMagne1          0\n",
       "handMagne2          0\n",
       "handMagne3          0\n",
       "chestTemperature    0\n",
       "chestAcc16_1        0\n",
       "chestAcc16_2        0\n",
       "chestAcc16_3        0\n",
       "chestAcc6_1         0\n",
       "chestAcc6_2         0\n",
       "chestAcc6_3         0\n",
       "chestGyro1          0\n",
       "chestGyro2          0\n",
       "chestGyro3          0\n",
       "chestMagne1         0\n",
       "chestMagne2         0\n",
       "chestMagne3         0\n",
       "ankleTemperature    0\n",
       "ankleAcc16_1        0\n",
       "ankleAcc16_2        0\n",
       "ankleAcc16_3        0\n",
       "ankleAcc6_1         0\n",
       "ankleAcc6_2         0\n",
       "ankleAcc6_3         0\n",
       "ankleGyro1          0\n",
       "ankleGyro2          0\n",
       "ankleGyro3          0\n",
       "ankleMagne1         0\n",
       "ankleMagne2         0\n",
       "ankleMagne3         0\n",
       "subject_id          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataCol.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ecf2552",
   "metadata": {},
   "source": [
    "Heart rate still has nan values because the interpolation calculates the values around the nan cell. It is normal to generate new nan values after interpolating since the first cells are NAN. How do I overcome this? Since the values after the index 4 are 100, we can assume the value of the first 4 cells is 100.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f9c0bde9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py:1637: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_single_block(indexer, value, name)\n"
     ]
    }
   ],
   "source": [
    "for i in range(0,4):\n",
    "    dataCol[\"heartrate\"].iloc[i]=100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44df2a0d",
   "metadata": {},
   "source": [
    "The function dataframe.isnull().sum().sum() returns the number of missing values in the data set:\n",
    "\n",
    "isna() function is used to detect missing values. It returns a boolean same-sized object indicating if the values are NA. NA values, such as None or NumPy. NaN gets mapped to True values.Then add The function data frame.isnull().sum().sum() returns the number of missing values in the data set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "38f82886",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "timestamp           0\n",
       "activityID          0\n",
       "heartrate           0\n",
       "handTemperature     0\n",
       "handAcc16_1         0\n",
       "handAcc16_2         0\n",
       "handAcc16_3         0\n",
       "handAcc6_1          0\n",
       "handAcc6_2          0\n",
       "handAcc6_3          0\n",
       "handGyro1           0\n",
       "handGyro2           0\n",
       "handGyro3           0\n",
       "handMagne1          0\n",
       "handMagne2          0\n",
       "handMagne3          0\n",
       "chestTemperature    0\n",
       "chestAcc16_1        0\n",
       "chestAcc16_2        0\n",
       "chestAcc16_3        0\n",
       "chestAcc6_1         0\n",
       "chestAcc6_2         0\n",
       "chestAcc6_3         0\n",
       "chestGyro1          0\n",
       "chestGyro2          0\n",
       "chestGyro3          0\n",
       "chestMagne1         0\n",
       "chestMagne2         0\n",
       "chestMagne3         0\n",
       "ankleTemperature    0\n",
       "ankleAcc16_1        0\n",
       "ankleAcc16_2        0\n",
       "ankleAcc16_3        0\n",
       "ankleAcc6_1         0\n",
       "ankleAcc6_2         0\n",
       "ankleAcc6_3         0\n",
       "ankleGyro1          0\n",
       "ankleGyro2          0\n",
       "ankleGyro3          0\n",
       "ankleMagne1         0\n",
       "ankleMagne2         0\n",
       "ankleMagne3         0\n",
       "subject_id          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataCol.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc6e67d2",
   "metadata": {},
   "source": [
    "corr() is used to find the pairwise correlation of all columns in the data frame and also frame the data in HTML table format for better visulation and exploration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e46c3215",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>activityID</th>\n",
       "      <th>heartrate</th>\n",
       "      <th>handTemperature</th>\n",
       "      <th>handAcc16_1</th>\n",
       "      <th>handAcc16_2</th>\n",
       "      <th>handAcc16_3</th>\n",
       "      <th>handAcc6_1</th>\n",
       "      <th>handAcc6_2</th>\n",
       "      <th>handAcc6_3</th>\n",
       "      <th>...</th>\n",
       "      <th>ankleAcc6_1</th>\n",
       "      <th>ankleAcc6_2</th>\n",
       "      <th>ankleAcc6_3</th>\n",
       "      <th>ankleGyro1</th>\n",
       "      <th>ankleGyro2</th>\n",
       "      <th>ankleGyro3</th>\n",
       "      <th>ankleMagne1</th>\n",
       "      <th>ankleMagne2</th>\n",
       "      <th>ankleMagne3</th>\n",
       "      <th>subject_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>37.66</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>2.24689</td>\n",
       "      <td>8.55387</td>\n",
       "      <td>5.77143</td>\n",
       "      <td>...</td>\n",
       "      <td>9.63162</td>\n",
       "      <td>-1.76757</td>\n",
       "      <td>0.265761</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37.67</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>2.27373</td>\n",
       "      <td>8.14592</td>\n",
       "      <td>5.78739</td>\n",
       "      <td>...</td>\n",
       "      <td>9.58649</td>\n",
       "      <td>-1.75247</td>\n",
       "      <td>0.250816</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37.68</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>2.26966</td>\n",
       "      <td>7.66268</td>\n",
       "      <td>5.78846</td>\n",
       "      <td>...</td>\n",
       "      <td>9.60196</td>\n",
       "      <td>-1.73721</td>\n",
       "      <td>0.356632</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.69</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>2.22177</td>\n",
       "      <td>7.25535</td>\n",
       "      <td>5.88000</td>\n",
       "      <td>...</td>\n",
       "      <td>9.58674</td>\n",
       "      <td>-1.78264</td>\n",
       "      <td>0.311453</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.70</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>2.20720</td>\n",
       "      <td>7.24042</td>\n",
       "      <td>5.95555</td>\n",
       "      <td>...</td>\n",
       "      <td>9.64677</td>\n",
       "      <td>-1.75240</td>\n",
       "      <td>0.295902</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp  activityID  heartrate  handTemperature  handAcc16_1  \\\n",
       "0      37.66           1      100.0           30.375      2.21530   \n",
       "1      37.67           1      100.0           30.375      2.29196   \n",
       "2      37.68           1      100.0           30.375      2.29090   \n",
       "3      37.69           1      100.0           30.375      2.21800   \n",
       "4      37.70           1      100.0           30.375      2.30106   \n",
       "\n",
       "   handAcc16_2  handAcc16_3  handAcc6_1  handAcc6_2  handAcc6_3  ...  \\\n",
       "0      8.27915      5.58753     2.24689     8.55387     5.77143  ...   \n",
       "1      7.67288      5.74467     2.27373     8.14592     5.78739  ...   \n",
       "2      7.14240      5.82342     2.26966     7.66268     5.78846  ...   \n",
       "3      7.14365      5.89930     2.22177     7.25535     5.88000  ...   \n",
       "4      7.25857      6.09259     2.20720     7.24042     5.95555  ...   \n",
       "\n",
       "   ankleAcc6_1  ankleAcc6_2  ankleAcc6_3  ankleGyro1  ankleGyro2  ankleGyro3  \\\n",
       "0      9.63162     -1.76757     0.265761    0.002908   -0.027714    0.001752   \n",
       "1      9.58649     -1.75247     0.250816    0.020882    0.000945    0.006007   \n",
       "2      9.60196     -1.73721     0.356632   -0.035392   -0.052422   -0.004882   \n",
       "3      9.58674     -1.78264     0.311453   -0.032514   -0.018844    0.026950   \n",
       "4      9.64677     -1.75240     0.295902    0.001351   -0.048878   -0.006328   \n",
       "\n",
       "   ankleMagne1  ankleMagne2  ankleMagne3  subject_id  \n",
       "0     -61.1081     -36.8636     -58.3696           1  \n",
       "1     -60.8916     -36.3197     -58.3656           1  \n",
       "2     -60.3407     -35.7842     -58.6119           1  \n",
       "3     -60.7646     -37.1028     -57.8799           1  \n",
       "4     -60.2040     -37.1225     -57.8847           1  \n",
       "\n",
       "[5 rows x 43 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataCol.corr()\n",
    "dataCol.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc9db10e",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58691ac5",
   "metadata": {},
   "source": [
    "Data Splitting into Train and Test Sets\n",
    "We should always check to see if the classes are balanced before splitting our data. This would imply that stratification is not needed for our split. We should stratify while splitting the data when classes' weights are unbalanced. Stratified sampling involves selecting samples of all classes and placing them on subsets created for the train and test sets. When the weights of the classes are not distributed normally, it helps to get better results. A normal distribution would suggest that each class' weight is the same as the weights of all other classes.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7d917272",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataCol['activityID'].value_counts().plot(kind = \"bar\",figsize = (12,6))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fff7bea",
   "metadata": {},
   "source": [
    "As you can see from the above plot, our classes are mostly balanced. Therefore, we split the data into train and test sets. In the industry, the most common split is 80% train set and 20% test set, which is also the split fraction that will be used.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2a04d812",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = dataCol.sample(frac=0.8, random_state=1)\n",
    "test_df = dataCol.drop(train_df.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b67518d",
   "metadata": {},
   "source": [
    "We will need to check some statistics/insights from the described method from pandas, as it can provide further information about how our data is being processed for our analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d4f0180c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>activityID</th>\n",
       "      <th>heartrate</th>\n",
       "      <th>handTemperature</th>\n",
       "      <th>handAcc16_1</th>\n",
       "      <th>handAcc16_2</th>\n",
       "      <th>handAcc16_3</th>\n",
       "      <th>handAcc6_1</th>\n",
       "      <th>handAcc6_2</th>\n",
       "      <th>handAcc6_3</th>\n",
       "      <th>...</th>\n",
       "      <th>ankleAcc6_1</th>\n",
       "      <th>ankleAcc6_2</th>\n",
       "      <th>ankleAcc6_3</th>\n",
       "      <th>ankleGyro1</th>\n",
       "      <th>ankleGyro2</th>\n",
       "      <th>ankleGyro3</th>\n",
       "      <th>ankleMagne1</th>\n",
       "      <th>ankleMagne2</th>\n",
       "      <th>ankleMagne3</th>\n",
       "      <th>subject_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "      <td>1.554298e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.705049e+03</td>\n",
       "      <td>8.080534e+00</td>\n",
       "      <td>1.074758e+02</td>\n",
       "      <td>3.275138e+01</td>\n",
       "      <td>-4.953526e+00</td>\n",
       "      <td>3.581113e+00</td>\n",
       "      <td>3.603514e+00</td>\n",
       "      <td>-4.886385e+00</td>\n",
       "      <td>3.570863e+00</td>\n",
       "      <td>3.787763e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>9.374706e+00</td>\n",
       "      <td>-4.445267e-02</td>\n",
       "      <td>-2.175620e+00</td>\n",
       "      <td>1.027736e-02</td>\n",
       "      <td>-3.649406e-02</td>\n",
       "      <td>5.607242e-03</td>\n",
       "      <td>-3.157962e+01</td>\n",
       "      <td>1.394841e+00</td>\n",
       "      <td>1.725137e+01</td>\n",
       "      <td>4.566578e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.093592e+03</td>\n",
       "      <td>6.175064e+00</td>\n",
       "      <td>2.699031e+01</td>\n",
       "      <td>1.794207e+00</td>\n",
       "      <td>6.239143e+00</td>\n",
       "      <td>6.886169e+00</td>\n",
       "      <td>3.958145e+00</td>\n",
       "      <td>6.245060e+00</td>\n",
       "      <td>6.585066e+00</td>\n",
       "      <td>3.945398e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>6.067489e+00</td>\n",
       "      <td>7.183548e+00</td>\n",
       "      <td>3.475628e+00</td>\n",
       "      <td>1.126197e+00</td>\n",
       "      <td>6.380780e-01</td>\n",
       "      <td>2.011908e+00</td>\n",
       "      <td>1.834688e+01</td>\n",
       "      <td>2.168353e+01</td>\n",
       "      <td>1.969368e+01</td>\n",
       "      <td>2.333375e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.120000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>5.700000e+01</td>\n",
       "      <td>2.487500e+01</td>\n",
       "      <td>-1.453670e+02</td>\n",
       "      <td>-1.043010e+02</td>\n",
       "      <td>-1.014520e+02</td>\n",
       "      <td>-6.121470e+01</td>\n",
       "      <td>-6.184170e+01</td>\n",
       "      <td>-6.193470e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>-6.114200e+01</td>\n",
       "      <td>-6.190350e+01</td>\n",
       "      <td>-6.231480e+01</td>\n",
       "      <td>-1.416200e+01</td>\n",
       "      <td>-1.304010e+01</td>\n",
       "      <td>-1.401960e+01</td>\n",
       "      <td>-1.726240e+02</td>\n",
       "      <td>-1.379080e+02</td>\n",
       "      <td>-1.027160e+02</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7.442925e+02</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>8.600000e+01</td>\n",
       "      <td>3.168750e+01</td>\n",
       "      <td>-8.970020e+00</td>\n",
       "      <td>1.057830e+00</td>\n",
       "      <td>1.162090e+00</td>\n",
       "      <td>-8.867070e+00</td>\n",
       "      <td>1.055562e+00</td>\n",
       "      <td>1.365070e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>8.396590e+00</td>\n",
       "      <td>-2.073120e+00</td>\n",
       "      <td>-3.399390e+00</td>\n",
       "      <td>-2.081647e-01</td>\n",
       "      <td>-1.066462e-01</td>\n",
       "      <td>-4.416657e-01</td>\n",
       "      <td>-4.170160e+01</td>\n",
       "      <td>-1.246927e+01</td>\n",
       "      <td>3.799632e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.480090e+03</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>1.040000e+02</td>\n",
       "      <td>3.312500e+01</td>\n",
       "      <td>-5.449130e+00</td>\n",
       "      <td>3.525300e+00</td>\n",
       "      <td>3.432840e+00</td>\n",
       "      <td>-5.377104e+00</td>\n",
       "      <td>3.566820e+00</td>\n",
       "      <td>3.663470e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>9.550020e+00</td>\n",
       "      <td>-2.252810e-01</td>\n",
       "      <td>-1.993145e+00</td>\n",
       "      <td>4.636280e-03</td>\n",
       "      <td>-3.977450e-03</td>\n",
       "      <td>-2.336400e-03</td>\n",
       "      <td>-3.400060e+01</td>\n",
       "      <td>7.672570e-01</td>\n",
       "      <td>1.876795e+01</td>\n",
       "      <td>5.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.664000e+03</td>\n",
       "      <td>1.300000e+01</td>\n",
       "      <td>1.240000e+02</td>\n",
       "      <td>3.406250e+01</td>\n",
       "      <td>-9.581007e-01</td>\n",
       "      <td>6.450508e+00</td>\n",
       "      <td>6.532445e+00</td>\n",
       "      <td>-9.061720e-01</td>\n",
       "      <td>6.458267e+00</td>\n",
       "      <td>6.778200e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.028160e+01</td>\n",
       "      <td>1.920960e+00</td>\n",
       "      <td>-5.958823e-01</td>\n",
       "      <td>1.308070e-01</td>\n",
       "      <td>1.160640e-01</td>\n",
       "      <td>9.121635e-02</td>\n",
       "      <td>-1.789610e+01</td>\n",
       "      <td>1.782927e+01</td>\n",
       "      <td>3.120910e+01</td>\n",
       "      <td>7.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.245680e+03</td>\n",
       "      <td>2.400000e+01</td>\n",
       "      <td>2.020000e+02</td>\n",
       "      <td>3.550000e+01</td>\n",
       "      <td>6.285960e+01</td>\n",
       "      <td>1.556990e+02</td>\n",
       "      <td>1.577600e+02</td>\n",
       "      <td>5.282140e+01</td>\n",
       "      <td>6.225980e+01</td>\n",
       "      <td>6.192340e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>6.196930e+01</td>\n",
       "      <td>6.204900e+01</td>\n",
       "      <td>6.093570e+01</td>\n",
       "      <td>1.742040e+01</td>\n",
       "      <td>1.358820e+01</td>\n",
       "      <td>1.448270e+01</td>\n",
       "      <td>9.155160e+01</td>\n",
       "      <td>9.369920e+01</td>\n",
       "      <td>1.469000e+02</td>\n",
       "      <td>9.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          timestamp    activityID     heartrate  handTemperature  \\\n",
       "count  1.554298e+06  1.554298e+06  1.554298e+06     1.554298e+06   \n",
       "mean   1.705049e+03  8.080534e+00  1.074758e+02     3.275138e+01   \n",
       "std    1.093592e+03  6.175064e+00  2.699031e+01     1.794207e+00   \n",
       "min    3.120000e+01  1.000000e+00  5.700000e+01     2.487500e+01   \n",
       "25%    7.442925e+02  3.000000e+00  8.600000e+01     3.168750e+01   \n",
       "50%    1.480090e+03  6.000000e+00  1.040000e+02     3.312500e+01   \n",
       "75%    2.664000e+03  1.300000e+01  1.240000e+02     3.406250e+01   \n",
       "max    4.245680e+03  2.400000e+01  2.020000e+02     3.550000e+01   \n",
       "\n",
       "        handAcc16_1   handAcc16_2   handAcc16_3    handAcc6_1    handAcc6_2  \\\n",
       "count  1.554298e+06  1.554298e+06  1.554298e+06  1.554298e+06  1.554298e+06   \n",
       "mean  -4.953526e+00  3.581113e+00  3.603514e+00 -4.886385e+00  3.570863e+00   \n",
       "std    6.239143e+00  6.886169e+00  3.958145e+00  6.245060e+00  6.585066e+00   \n",
       "min   -1.453670e+02 -1.043010e+02 -1.014520e+02 -6.121470e+01 -6.184170e+01   \n",
       "25%   -8.970020e+00  1.057830e+00  1.162090e+00 -8.867070e+00  1.055562e+00   \n",
       "50%   -5.449130e+00  3.525300e+00  3.432840e+00 -5.377104e+00  3.566820e+00   \n",
       "75%   -9.581007e-01  6.450508e+00  6.532445e+00 -9.061720e-01  6.458267e+00   \n",
       "max    6.285960e+01  1.556990e+02  1.577600e+02  5.282140e+01  6.225980e+01   \n",
       "\n",
       "         handAcc6_3  ...   ankleAcc6_1   ankleAcc6_2   ankleAcc6_3  \\\n",
       "count  1.554298e+06  ...  1.554298e+06  1.554298e+06  1.554298e+06   \n",
       "mean   3.787763e+00  ...  9.374706e+00 -4.445267e-02 -2.175620e+00   \n",
       "std    3.945398e+00  ...  6.067489e+00  7.183548e+00  3.475628e+00   \n",
       "min   -6.193470e+01  ... -6.114200e+01 -6.190350e+01 -6.231480e+01   \n",
       "25%    1.365070e+00  ...  8.396590e+00 -2.073120e+00 -3.399390e+00   \n",
       "50%    3.663470e+00  ...  9.550020e+00 -2.252810e-01 -1.993145e+00   \n",
       "75%    6.778200e+00  ...  1.028160e+01  1.920960e+00 -5.958823e-01   \n",
       "max    6.192340e+01  ...  6.196930e+01  6.204900e+01  6.093570e+01   \n",
       "\n",
       "         ankleGyro1    ankleGyro2    ankleGyro3   ankleMagne1   ankleMagne2  \\\n",
       "count  1.554298e+06  1.554298e+06  1.554298e+06  1.554298e+06  1.554298e+06   \n",
       "mean   1.027736e-02 -3.649406e-02  5.607242e-03 -3.157962e+01  1.394841e+00   \n",
       "std    1.126197e+00  6.380780e-01  2.011908e+00  1.834688e+01  2.168353e+01   \n",
       "min   -1.416200e+01 -1.304010e+01 -1.401960e+01 -1.726240e+02 -1.379080e+02   \n",
       "25%   -2.081647e-01 -1.066462e-01 -4.416657e-01 -4.170160e+01 -1.246927e+01   \n",
       "50%    4.636280e-03 -3.977450e-03 -2.336400e-03 -3.400060e+01  7.672570e-01   \n",
       "75%    1.308070e-01  1.160640e-01  9.121635e-02 -1.789610e+01  1.782927e+01   \n",
       "max    1.742040e+01  1.358820e+01  1.448270e+01  9.155160e+01  9.369920e+01   \n",
       "\n",
       "        ankleMagne3    subject_id  \n",
       "count  1.554298e+06  1.554298e+06  \n",
       "mean   1.725137e+01  4.566578e+00  \n",
       "std    1.969368e+01  2.333375e+00  \n",
       "min   -1.027160e+02  1.000000e+00  \n",
       "25%    3.799632e+00  2.000000e+00  \n",
       "50%    1.876795e+01  5.000000e+00  \n",
       "75%    3.120910e+01  7.000000e+00  \n",
       "max    1.469000e+02  9.000000e+00  \n",
       "\n",
       "[8 rows x 43 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a93b970",
   "metadata": {},
   "source": [
    "As implied by the various indications on the readme file of the dataset, heart rate will be our primary metric for tracking subjects during activities. Looking at the table, we can see that the mean heart rate for the entire dataset is 107.4. The minimum heart rate is 57, and the maximum heart rate is 202. The quartiles shown can be further analysed by plotting a box plot, which will help to understand our outliers and quartile groups, as well as show the average heart rate for our data.\n",
    "\n",
    "We can determine the most cumbersome activities by plotting a bar chart that shows the mean heart rate for each activity performed. From there, we can analyze more details about specific activities. We will use the activities' names in order to analyze the results more easily.\n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3d759fc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(4,4))\n",
    "plt.title(\"Heart Rate \")\n",
    "ax = sns.boxplot(y=train_df[\"heartrate\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "17c80b1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='activityID'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_heartrate_act = train_df['heartrate'].groupby(train_df['activityID']).mean()\n",
    "df_heartrate_act.index = df_heartrate_act.index.map(activityIDdict)\n",
    "df_heartrate_act.plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "322aed68",
   "metadata": {},
   "source": [
    "Based on the bar chart, Rope Jumping and Running are the most challenging activities.\n",
    "If we want to see if there are any anomalies in our data, we need to plot a heat map, which shows whether there are correlations between the data. To determine the extent of problems, all columns will be used.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b0bf9d1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-22-409550941e6f>:6: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  sns.heatmap(df_corr, mask=np.zeros_like(df_corr, dtype=np.bool), cmap = \"BrBG\",ax=ax)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pandas.plotting import scatter_matrix\n",
    "df_corr = train_df.corr()\n",
    "df_corr = df_corr.drop(['activityID'], axis = 1)\n",
    "\n",
    "f, ax = plt.subplots(figsize=(15, 10))\n",
    "sns.heatmap(df_corr, mask=np.zeros_like(df_corr, dtype=np.bool), cmap = \"BrBG\",ax=ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0438a448",
   "metadata": {},
   "source": [
    "The heatmap shows the amount of statistical similarity between our different columns. We can easily observe that the gyroscopes do not correlate with any of our other data and seem not needed in this model.\n",
    "However, we can understand the correlation between accelerometers of the hand and temperature. Furthermore, the chest magnetometers seem to be correlated with heart rate, which makes sense since they are close to one another.\n",
    " \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74658a18",
   "metadata": {},
   "source": [
    "# Hypothesis Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfda83db",
   "metadata": {},
   "source": [
    "Testing hypotheses is a statistical method for making statistical decisions based on experimental data. Hypothesis testing is an assumption that we make about a population parameter.\n",
    "\n",
    "\n",
    "\n",
    "From the bar charts shown above, running and rope jumping are the most difficult activities. We will therefore test our hypothesis based on these two activities and how their heart rate data correlates with the other activities' heart rates. We will compare the mean heart rates of the two activities with the mean heart rates of all activities.\n",
    " \n",
    "The null hypothesis is:\n",
    " \n",
    "h0 : The mean heart rate for the cumbersome activities does not differ from the mean of all activities\n",
    " \n",
    "A non-null hypothesis is as follows:\n",
    " \n",
    "h1 : The mean heart rate of cumbersome activities has a mass difference from the mean of all activities\n",
    "\n",
    "In statistics, hypothesis testing is an essential procedure. By evaluating two mutually exclusive statements about a population, a hypothesis test can determine which statement is best supported by the sample data. Hypothesis tests determine whether a finding is statistically significant.\n",
    " \n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e63eae6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "running_data = train_df.loc[(train_df[\"activityID\"] == 5)]\n",
    "ropejumping_data = train_df.loc[(train_df[\"activityID\"] == 24)]\n",
    "cumbersome_data = running_data + ropejumping_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e7071c6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The p_value is  0.0  and h0 is rejected. There is mass difference between the means of cumbersome activities and all activities.\n"
     ]
    }
   ],
   "source": [
    "import scipy.stats\n",
    "\n",
    "p = train_df['heartrate'].mean() / (running_data['heartrate'].std() / math.sqrt( running_data['heartrate'].count() ))\n",
    "pValue = 1 - scipy.stats.norm.cdf(p)\n",
    "\n",
    "if pValue > 0.1:\n",
    "    print(\"The p_value is \", pValue, \" and h1 is rejected. There is no mass difference between the means of cumbersome activities and all activities.\")\n",
    "else:\n",
    "    print(\"The p_value is \", pValue, \" and h0 is rejected. There is mass difference between the means of cumbersome activities and all activities.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "351033d4",
   "metadata": {},
   "source": [
    "After verifying that our hypothesis is not null, proving that the mean heart rate of the two most cumbersome activities is in fact very different from the mean heart rate of all the activities, we can move on to Modeling. We will be comparing different modelling algorithms and selecting one as the best modeling algorithm after testing.\n",
    " \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10ba3995",
   "metadata": {},
   "source": [
    "# develop and test at least one model which uses multiple attributes to make predictions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab7189b4",
   "metadata": {},
   "source": [
    "The precision of our model would be impacted if some variables are dropped. The variables that should be eliminated are timestamp and subject_id as they are numeric numbers which our model uses in its calculations, but since their values do not have any meaning, the model used would have noise and the predictions of accuracy would be inaccurate.\n",
    "\n",
    "The multioutput regression problem involves predicting two or more numerical values given an input example.\n",
    "In this case, predicting the x and y values is an example of predicting a coordinate given an input. Other  example would be multi-step time series forecasting that involves predicting multiple future time series of a given variable.\n",
    "A regression algorithm uses machine learning algorithms to predict a single numeric value. There are some algorithms that support multioutput regression inherently, such as linear regression and decision trees. In addition, there are special workaround models that can be used to wrap and use algorithms that do not natively support predicting multiple outcomes.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "58754fc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.model_selection import train_test_split,cross_val_score,StratifiedShuffleSplit\n",
    "from sklearn.metrics import precision_score,recall_score, f1_score, confusion_matrix,roc_auc_score,roc_curve, accuracy_score\n",
    "from sklearn.preprocessing import StandardScaler, RobustScaler\n",
    "from sklearn.decomposition import PCA, TruncatedSVD\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b220d33c",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = train_df.drop([\"timestamp\", \"subject_id\"],1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e10352b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>activityID</th>\n",
       "      <th>heartrate</th>\n",
       "      <th>handTemperature</th>\n",
       "      <th>handAcc16_1</th>\n",
       "      <th>handAcc16_2</th>\n",
       "      <th>handAcc16_3</th>\n",
       "      <th>handAcc6_1</th>\n",
       "      <th>handAcc6_2</th>\n",
       "      <th>handAcc6_3</th>\n",
       "      <th>handGyro1</th>\n",
       "      <th>...</th>\n",
       "      <th>ankleAcc16_3</th>\n",
       "      <th>ankleAcc6_1</th>\n",
       "      <th>ankleAcc6_2</th>\n",
       "      <th>ankleAcc6_3</th>\n",
       "      <th>ankleGyro1</th>\n",
       "      <th>ankleGyro2</th>\n",
       "      <th>ankleGyro3</th>\n",
       "      <th>ankleMagne1</th>\n",
       "      <th>ankleMagne2</th>\n",
       "      <th>ankleMagne3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>312921</th>\n",
       "      <td>3</td>\n",
       "      <td>-0.368421</td>\n",
       "      <td>0.447368</td>\n",
       "      <td>-0.384512</td>\n",
       "      <td>0.220069</td>\n",
       "      <td>-0.572507</td>\n",
       "      <td>-0.361436</td>\n",
       "      <td>0.256971</td>\n",
       "      <td>-0.530520</td>\n",
       "      <td>-0.012729</td>\n",
       "      <td>...</td>\n",
       "      <td>0.321939</td>\n",
       "      <td>0.088339</td>\n",
       "      <td>-0.322152</td>\n",
       "      <td>0.351800</td>\n",
       "      <td>0.220183</td>\n",
       "      <td>0.001165</td>\n",
       "      <td>-0.139354</td>\n",
       "      <td>0.641700</td>\n",
       "      <td>-0.582432</td>\n",
       "      <td>0.658114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141735</th>\n",
       "      <td>12</td>\n",
       "      <td>1.681818</td>\n",
       "      <td>0.236842</td>\n",
       "      <td>-0.721708</td>\n",
       "      <td>-0.103407</td>\n",
       "      <td>-0.206281</td>\n",
       "      <td>-0.625117</td>\n",
       "      <td>-0.108947</td>\n",
       "      <td>-0.253147</td>\n",
       "      <td>-0.868631</td>\n",
       "      <td>...</td>\n",
       "      <td>0.020813</td>\n",
       "      <td>0.842160</td>\n",
       "      <td>-0.269519</td>\n",
       "      <td>-0.185601</td>\n",
       "      <td>-0.829881</td>\n",
       "      <td>3.024896</td>\n",
       "      <td>-0.265261</td>\n",
       "      <td>-0.744416</td>\n",
       "      <td>1.091512</td>\n",
       "      <td>-0.924482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1191085</th>\n",
       "      <td>24</td>\n",
       "      <td>2.026316</td>\n",
       "      <td>0.289474</td>\n",
       "      <td>0.457975</td>\n",
       "      <td>0.035504</td>\n",
       "      <td>-2.015047</td>\n",
       "      <td>0.603512</td>\n",
       "      <td>0.072534</td>\n",
       "      <td>-1.452154</td>\n",
       "      <td>-5.190897</td>\n",
       "      <td>...</td>\n",
       "      <td>1.905139</td>\n",
       "      <td>-7.260794</td>\n",
       "      <td>-0.946788</td>\n",
       "      <td>1.482238</td>\n",
       "      <td>5.524513</td>\n",
       "      <td>-0.773631</td>\n",
       "      <td>-1.222988</td>\n",
       "      <td>-0.447203</td>\n",
       "      <td>-0.428537</td>\n",
       "      <td>-0.674781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1206914</th>\n",
       "      <td>1</td>\n",
       "      <td>-1.105263</td>\n",
       "      <td>0.131579</td>\n",
       "      <td>1.290689</td>\n",
       "      <td>-0.693932</td>\n",
       "      <td>0.901352</td>\n",
       "      <td>1.320385</td>\n",
       "      <td>-0.723956</td>\n",
       "      <td>0.911347</td>\n",
       "      <td>0.065061</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.351884</td>\n",
       "      <td>-5.128883</td>\n",
       "      <td>-2.300004</td>\n",
       "      <td>-0.300736</td>\n",
       "      <td>-0.037313</td>\n",
       "      <td>0.027350</td>\n",
       "      <td>0.037709</td>\n",
       "      <td>0.700615</td>\n",
       "      <td>0.847494</td>\n",
       "      <td>-0.859194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1710520</th>\n",
       "      <td>2</td>\n",
       "      <td>-0.657895</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.434876</td>\n",
       "      <td>-2.413007</td>\n",
       "      <td>-0.473610</td>\n",
       "      <td>0.449008</td>\n",
       "      <td>-2.412753</td>\n",
       "      <td>-0.481267</td>\n",
       "      <td>-0.015890</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.107595</td>\n",
       "      <td>-0.192439</td>\n",
       "      <td>0.783229</td>\n",
       "      <td>-0.057162</td>\n",
       "      <td>0.016440</td>\n",
       "      <td>0.068780</td>\n",
       "      <td>0.058657</td>\n",
       "      <td>0.611770</td>\n",
       "      <td>0.497042</td>\n",
       "      <td>0.263863</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         activityID  heartrate  handTemperature  handAcc16_1  handAcc16_2  \\\n",
       "312921            3  -0.368421         0.447368    -0.384512     0.220069   \n",
       "141735           12   1.681818         0.236842    -0.721708    -0.103407   \n",
       "1191085          24   2.026316         0.289474     0.457975     0.035504   \n",
       "1206914           1  -1.105263         0.131579     1.290689    -0.693932   \n",
       "1710520           2  -0.657895         0.500000     0.434876    -2.413007   \n",
       "\n",
       "         handAcc16_3  handAcc6_1  handAcc6_2  handAcc6_3  handGyro1  ...  \\\n",
       "312921     -0.572507   -0.361436    0.256971   -0.530520  -0.012729  ...   \n",
       "141735     -0.206281   -0.625117   -0.108947   -0.253147  -0.868631  ...   \n",
       "1191085    -2.015047    0.603512    0.072534   -1.452154  -5.190897  ...   \n",
       "1206914     0.901352    1.320385   -0.723956    0.911347   0.065061  ...   \n",
       "1710520    -0.473610    0.449008   -2.412753   -0.481267  -0.015890  ...   \n",
       "\n",
       "         ankleAcc16_3  ankleAcc6_1  ankleAcc6_2  ankleAcc6_3  ankleGyro1  \\\n",
       "312921       0.321939     0.088339    -0.322152     0.351800    0.220183   \n",
       "141735       0.020813     0.842160    -0.269519    -0.185601   -0.829881   \n",
       "1191085      1.905139    -7.260794    -0.946788     1.482238    5.524513   \n",
       "1206914     -0.351884    -5.128883    -2.300004    -0.300736   -0.037313   \n",
       "1710520     -0.107595    -0.192439     0.783229    -0.057162    0.016440   \n",
       "\n",
       "         ankleGyro2  ankleGyro3  ankleMagne1  ankleMagne2  ankleMagne3  \n",
       "312921     0.001165   -0.139354     0.641700    -0.582432     0.658114  \n",
       "141735     3.024896   -0.265261    -0.744416     1.091512    -0.924482  \n",
       "1191085   -0.773631   -1.222988    -0.447203    -0.428537    -0.674781  \n",
       "1206914    0.027350    0.037709     0.700615     0.847494    -0.859194  \n",
       "1710520    0.068780    0.058657     0.611770     0.497042     0.263863  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import StandardScaler,RobustScaler\n",
    "\n",
    " \n",
    "scaler = RobustScaler()\n",
    "df_scaled = train_df.copy()\n",
    "df_scaled_test = test_df.copy()\n",
    "\n",
    "df_scaled.iloc[:,1:41] = scaler.fit_transform(df_scaled.iloc[:,1:41])\n",
    "df_scaled_test.iloc[:,1:41] = scaler.fit_transform(df_scaled_test.iloc[:,1:41])\n",
    "\n",
    "df_scaled.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "61c0cb6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = df_scaled.drop('activityID', axis=1).values\n",
    "y_train = df_scaled['activityID'].values\n",
    "\n",
    "\n",
    "X_test = df_scaled.drop('activityID', axis=1).values\n",
    "y_test = df_scaled['activityID'].values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6685bab",
   "metadata": {},
   "source": [
    "##Principal Component Analysis (PCA) for dimension reduction\n",
    "\n",
    "In most cases, 90-98% of the variance will explain our data really well. When plotting the variance ratio against the number of components, we could see how many of those we could use. As we see from the graph below 15 componments fall around to 94% of the variance.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "bbdd5786",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "pca = PCA()\n",
    "pca.fit(X_train)\n",
    "var= pca.explained_variance_ratio_\n",
    "var1=np.cumsum(np.round(pca.explained_variance_ratio_, decimals=4)*100)\n",
    "\n",
    "plt.title(\"PCA Variance against num of Componmnets\")\n",
    "plt.ylabel(\"Variance %\")\n",
    "plt.xlabel(\"Number of componments\")\n",
    "l = plt.axhline(94, color=\"red\")\n",
    "\n",
    "plt.plot(var1)\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b6051466",
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = PCA(n_components=17)\n",
    "X_train=pca.fit_transform(X_train)\n",
    "X_test=pca.fit_transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f52e8810",
   "metadata": {},
   "source": [
    "# Model selection\n",
    "\n",
    "We will train two models and test their performance in this section.\n",
    "We will study two modelling algorithms, Random Forest and Logistic Regression.\n",
    "The Random Forest algorithm can be used for both classification and regression, making it extremely versatile. Random Forest is a forest of trees, decision trees that are randomly placed in that forest. The algorithms creates and combines decision trees together, the more trees in the forest, the better the accuracy of its predictions will be.\n",
    "Random Forest algorithms are good due to their high accuracy and flexibility, i.e., can be used for both classification and regression models. Furthermore, Random Forests facilitate good performance of high dimensional datasets, which our dataset has.\n",
    "The logistic regression algorithm is a simple method that can be used for binary/multivariate classifications. The result of it is a probability that a data point is part of a class.\n",
    "\n",
    "For each class, $c$, we need to keep a record of \n",
    "* True Positives: $TP=|\\{i|\\mbox{prediction}(i)=\\mbox{label}(i)=c\\}|$\n",
    "* False Negatives: $FN=|\\{i|\\mbox{prediction}(i)\\neq \\mbox{label}(i)=c\\}|$\n",
    "* False Positives: $FP=|\\{i|\\mbox{label}(i) \\neq \\mbox{prediction}(i)=c\\}|$\n",
    "* True Negatives: $TN=|\\{i|\\mbox{prediction}(i)=\\mbox{label}(i)\\neq c\\}|$\n",
    "\n",
    "Note the symmetry in the binary classification task (the TN for one class are the TP for the other class and so on).  Therefore, in binary classification, we just record these values and compute the following evaluation metrics for a single class (e.g. \"Relevant\" or \"Positive\")\n",
    "\n",
    "* Precision: \n",
    "\\begin{eqnarray*}\n",
    "P=\\frac{TP}{TP+FP}\n",
    "\\end{eqnarray*}\n",
    "* Recall: \n",
    "\\begin{eqnarray*}\n",
    "R=\\frac{TP}{TP+FN}\n",
    "\\end{eqnarray*}\n",
    "* F1-score: \n",
    "\\begin{eqnarray*}\n",
    "F1 = \\frac{2\\times P\\times R}{P+R}\n",
    "\\end{eqnarray*}\n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9993a811",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  0.49289647159039\n",
      "Error:  0.49289647159039\n",
      "Precision 0.47146771476273647\n",
      "Recall 0.42373099701306266\n",
      "F1 0.4217069575837307\n"
     ]
    }
   ],
   "source": [
    "def get_metrics (y_true,y_pred):\n",
    "    acc = accuracy_score(y_true, y_pred)\n",
    "    err = 1-acc\n",
    "    p = precision_score(y_true, y_pred,average=None).mean()\n",
    "    r = recall_score(y_true, y_pred, average=None).mean()\n",
    "    f1 = f1_score(y_true, y_pred, average=None).mean()\n",
    "   \n",
    "    print(\"Accuracy: \",acc)\n",
    "    print(\"Error: \",acc)\n",
    "    print(\"Precision\", p)\n",
    "    print(\"Recall\", r)\n",
    "    print(\"F1\", f1)\n",
    "    \n",
    "    \n",
    "\n",
    "log_reg = LogisticRegression()\n",
    "log_reg.fit(X=X_train, y=y_train )\n",
    "y_pred_lr = log_reg.predict(X_test)\n",
    "get_metrics(y_test, y_pred_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1130c301",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  0.9999993566227325\n",
      "Error:  0.9999993566227325\n",
      "Precision 0.9999994524136512\n",
      "Recall 0.9999995637318033\n",
      "F1 0.9999995080712568\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier(n_jobs =4)\n",
    "rfc.fit(X_train,y_train)\n",
    "y_pred_rf = rfc.predict(X_test)\n",
    "get_metrics(y_test,y_pred_rf)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "956d3fe4",
   "metadata": {},
   "source": [
    "# Cross validation\n",
    "These models do seem to do well, but the metrics used do not represent the true score since they were trained on a specific part of the dataset. By using cross validation, we can generate 5 different samples by having k=5 folds. As a result, we will get 5 different metrics. Our model's performance will be better represented by the mean value of these metrics\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3ea13d0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Claasifier</th>\n",
       "      <th>Accurancy</th>\n",
       "      <th>MSE</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.492888</td>\n",
       "      <td>6.195737</td>\n",
       "      <td>0.421701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>RandomForestClassifier</td>\n",
       "      <td>0.966255</td>\n",
       "      <td>1.503591</td>\n",
       "      <td>0.963863</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Claasifier  Accurancy       MSE        F1\n",
       "0      LogisticRegression   0.492888  6.195737  0.421701\n",
       "1  RandomForestClassifier   0.966255  1.503591  0.963863"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "\n",
    "classifiers = [LogisticRegression(),\n",
    "               RandomForestClassifier(n_jobs =4)]\n",
    "\n",
    "score_lst = []\n",
    "for cls in classifiers:\n",
    "    accs  = accuracy_score(y_train, cross_val_predict(cls,X_train,y_train,cv = 5))  \n",
    "    scores = cross_val_score(cls,X_train,y_train,scoring = \"neg_mean_squared_error\",cv= 5)\n",
    "    score = np.sqrt(-scores)\n",
    "    f1 = cross_val_score(cls,X_test, y_test,scoring = \"f1_macro\", cv =5)\n",
    "    \n",
    "    score_lst.append([cls.__class__.__name__,accs,score.mean(), f1.mean()])\n",
    "\n",
    "df_scores=pd.DataFrame(columns = [\"Claasifier\",\"Accurancy\",\"MSE\",\"F1\"],data =  score_lst)\n",
    "display(df_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cff71ec7",
   "metadata": {},
   "source": [
    "# RESULT:-\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5befa5e",
   "metadata": {},
   "source": [
    "The PAMAP2 (Physical Activity Monitoring dataset) contains data about the different activities and during that activity their initial measuring unit so that's raw data we did clean that data for better analysis to make good prudent from that data so later we did exploratory data we found that the chest magnetometers seem to be correlated with heart rate, which makes sense since they are close to one another and so exploration gives us estimation which data is correlated and put for next step .so after hypothesis and prediction model from the random forest and logistic regression algorithms and we get the value of accuracy, error, precision, recall and f1 value we get the model accuracy according to that so final output and predict for product optimistaion that which one is best give accurcy by using the logistic regression and RandomforestClassifier.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14422bdc",
   "metadata": {},
   "source": [
    "References\n",
    "\n",
    "Archive.ics.uci.edu. (2012). UCI Machine Learning Repository: PAMAP2 Physical Activity Monitoring Data Set. [online] Available at: http://archive.ics.uci.edu/ml/datasets/pamap2+physical+activity+monitoring [Accessed 15 Dec. 2018].\n",
    "\n",
    "PAMAP2_Dataset: Physical Activity Monitoring. (n.d.). [ebook] Available at: http://archive.ics.uci.edu/ml/machine-learning-databases/00231/readme.pdf [Accessed 15 Dec. 2018].\n",
    "\n",
    "Scikit-learn.org. (n.d.). Robust Scaling on Toy Data — scikit-learn 0.18.2 documentation. [online] Available at: https://scikit-learn.org/0.18/auto_examples/preprocessing/plot_robust_scaling.html [Accessed 2 Jan. 2019].\n",
    "\n",
    "labwork from NLP about accuracy formula and all other formula. and help form GITHUB and kaggle for better analysis.\n",
    "\n",
    "Stackoverflow.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6aaad13",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
